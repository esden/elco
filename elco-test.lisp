(in-package :elco-test)

(defvar *all-tests* '())

(defun run-test (input output)
  (elco:compile-program input)
  (let ((gcc-output (elco:build)))
    (if (not (equal gcc-output ""))
        (format t "gcc problem: ~s~%" gcc-output)
        (let ((elco-output (elco:execute)))
          (if (not (equal elco-output (format nil output)))
              (format t "FAILED, expected output was ~s but got ~s~%" output elco-output)
              t)))))

(defun run-tests (&key tests select)
  (if tests
      (if (stringp (car tests))
          (let ((break-loop nil))
            (format t "Running testsuite for ~s~%" (car tests))
            (force-output *standard-output*)
            (loop for i in (cadr tests)
               until break-loop do
               (format t "test ~s : ~s ... " (car tests) i)
               (if (run-test (car i) (caddr i))
                   (format t "PASSED~%")
                   (setf break-loop T)))
            (if break-loop
                nil
                (progn 
                  (format t "All tests succeeded!~%")
                  t)))
          (loop for i in tests  
             until (if select 
                       (if (equal (car i) select)
                           (not (run-tests :tests i))
                           nil)
                       (not (run-tests :tests i)))))
      (if select
          (run-tests :select select :tests *all-tests*)
          (run-tests :tests *all-tests*))))

(defmacro deftest ((test-id) &body body)
  `(setf *all-tests* 
         (append *all-tests* 
                 (list (list
                        ,test-id
                        ',body)))))

(setf *all-tests* '())

;;; Step 1

(deftest ("fixnum")
  (0  => "0~%")
  (1  => "1~%")
  (-1 => "-1~%")
  (10  => "10~%")
  (-10 => "-10~%")                   
  (2736 => "2736~%")             
  (-2736 => "-2736~%")
  (536870911 => "536870911~%")
  (-536870912 => "-536870912~%"))

;;; Step 2

(deftest ("immediate constants")
  (F => "F~%")
  (T => "T~%")
  (nil => "NIL~%")
  (#\Nul => "#\\nul~%")
  (#\Soh => "#\\soh~%")
  (#\Stx => "#\\stx~%")
  (#\Etx => "#\\etx~%")
  (#\Eot => "#\\eot~%")
  (#\Enq => "#\\enq~%")
  (#\Ack => "#\\ack~%")
  (#\Bel => "#\\bel~%")
  (#\Backspace => "#\\bs~%")
  (#\tab => "#\\tab~%")
  (#\newline => "#\\newline~%")
  (#\Vt => "#\\vt~%")
  (#\Page => "#\\ff~%")
  (#\Return => "#\\return~%")
  (#\So => "#\\so~%")
  (#\Si => "#\\si~%")
  (#\Dle => "#\\dle~%")
  (#\Dc1 => "#\\dc1~%")
  (#\Dc2 => "#\\dc2~%")
  (#\Dc3 => "#\\dc3~%")
  (#\Dc4 => "#\\dc4~%")
  (#\Nak => "#\\nak~%")
  (#\Syn => "#\\syn~%")
  (#\Etb => "#\\etb~%")
  (#\Can => "#\\can~%")
  (#\Em => "#\\em~%")
  (#\Sub => "#\\sub~%")
  (#\Esc => "#\\esc~%")
  (#\Fs => "#\\fs~%")
  (#\Gs => "#\\gs~%")
  (#\Rs => "#\\rs~%")
  (#\Us => "#\\us~%")
  (#\space => "#\\space~%")
  (#\! => "#\\!~%")
  (#\" => "#\\\"~%")
  (#\# => "#\\#~%")
  (#\$ => "#\\$~%")
  (#\% => "#\\%~%")
  (#\& => "#\\&~%")
  (#\' => "#\\'~%")
  (#\( => "#\\(~%")
  (#\) => "#\\)~%")
  (#\* => "#\\*~%")
  (#\+ => "#\\+~%")
  (#\, => "#\\,~%")
  (#\- => "#\\-~%")
  (#\. => "#\\.~%")
  (#\/ => "#\\/~%")
  (#\0 => "#\\0~%")
  (#\1 => "#\\1~%")
  (#\2 => "#\\2~%")
  (#\3 => "#\\3~%")
  (#\4 => "#\\4~%")
  (#\5 => "#\\5~%")
  (#\6 => "#\\6~%")
  (#\7 => "#\\7~%")
  (#\8 => "#\\8~%")
  (#\9 => "#\\9~%")
  (#\: => "#\\:~%")
  (#\; => "#\\;~%")
  (#\< => "#\\<~%")
  (#\= => "#\\=~%")
  (#\> => "#\\>~%")
  (#\? => "#\\?~%")
  (#\@ => "#\\@~%")
  (#\A => "#\\A~%")
  (#\B => "#\\B~%")
  (#\C => "#\\C~%")
  (#\D => "#\\D~%")
  (#\E => "#\\E~%")
  (#\F => "#\\F~%")
  (#\G => "#\\G~%")
  (#\H => "#\\H~%")
  (#\I => "#\\I~%")
  (#\J => "#\\J~%")
  (#\K => "#\\K~%")
  (#\L => "#\\L~%")
  (#\M => "#\\M~%")
  (#\N => "#\\N~%")
  (#\O => "#\\O~%")
  (#\P => "#\\P~%")
  (#\Q => "#\\Q~%")
  (#\R => "#\\R~%")
  (#\S => "#\\S~%")
  (#\T => "#\\T~%")
  (#\U => "#\\U~%")
  (#\V => "#\\V~%")
  (#\W => "#\\W~%")
  (#\X => "#\\X~%")
  (#\Y => "#\\Y~%")
  (#\Z => "#\\Z~%")
  (#\( => "#\\(~%")
  (#\\ => "#\\\\~%")
  (#\] => "#\\]~%")
  (#\^ => "#\\^~%")
  (#\_ => "#\\_~%")
  (#\` => "#\\`~%")
  (#\a => "#\\a~%")
  (#\b => "#\\b~%")
  (#\c => "#\\c~%")
  (#\d => "#\\d~%")
  (#\e => "#\\e~%")
  (#\f => "#\\f~%")
  (#\g => "#\\g~%")
  (#\h => "#\\h~%")
  (#\i => "#\\i~%")
  (#\j => "#\\j~%")
  (#\k => "#\\k~%")
  (#\l => "#\\l~%")
  (#\m => "#\\m~%")
  (#\n => "#\\n~%")
  (#\o => "#\\o~%")
  (#\p => "#\\p~%")
  (#\q => "#\\q~%")
  (#\r => "#\\r~%")
  (#\s => "#\\s~%")
  (#\t => "#\\t~%")
  (#\u => "#\\u~%")
  (#\v => "#\\v~%")
  (#\w => "#\\w~%")
  (#\x => "#\\x~%")
  (#\y => "#\\y~%")
  (#\z => "#\\z~%")
  (#\{ => "#\\{~%")
  (#\| => "#\\|~%")
  (#\} => "#\\}~%")
  (#\~ => "#\\~~~%")
  (#\Rubout => "#\\del~%"))

;;; Step 3

(deftest ("fx1+")
  ((elco:fx1+ 0) => "1~%")
  ((elco:fx1+ -1) => "0~%")
  ((elco:fx1+ 1) => "2~%")
  ((elco:fx1+ -100) => "-99~%")
  ((elco:fx1+ 1000) => "1001~%")
  ((elco:fx1+ 536870910) => "536870911~%")
  ((elco:fx1+ -536870912) => "-536870911~%")
  ((elco:fx1+ (elco:fx1+ 0)) => "2~%")
  ((elco:fx1+ (elco:fx1+ (elco:fx1+ (elco:fx1+ (elco:fx1+ (elco:fx1+ 12)))))) => "18~%"))

(deftest ("fx-char and char->fx")
   ((elco:fx-char 65) => "#\\A~%")
   ((elco:fx-char 97) => "#\\a~%")
   ((elco:fx-char 122) => "#\\z~%")
   ((elco:fx-char 90) => "#\\Z~%")
   ((elco:fx-char 48) => "#\\0~%")
   ((elco:fx-char 57) => "#\\9~%")
   ((elco:char-fx #\A) => "65~%")
   ((elco:char-fx #\a) => "97~%")
   ((elco:char-fx #\z) => "122~%")
   ((elco:char-fx #\Z) => "90~%")
   ((elco:char-fx #\0) => "48~%")
   ((elco:char-fx #\9) => "57~%")
   ((elco:char-fx (elco:fx-char 12)) => "12~%")
   ((elco:fx-char (elco:char-fx #\x)) => "#\\x~%"))

(deftest ("fixnump")
   ((elco:fixnump 0) => "T~%")
   ((elco:fixnump 1) => "T~%")
   ((elco:fixnump -1) => "T~%")
   ((elco:fixnump 37287) => "T~%")
   ((elco:fixnump -23873) => "T~%")
   ((elco:fixnump 536870911) => "T~%")
   ((elco:fixnump -536870912) => "T~%")
   ((elco:fixnump elco:T) => "F~%")
   ((elco:fixnump elco:F) => "F~%")
   ((elco:fixnump ()) => "F~%")
   ((elco:fixnump #\Q) => "F~%")
   ((elco:fixnump (elco:fixnump 12)) => "F~%")
   ((elco:fixnump (elco:fixnump elco:F)) => "F~%")
   ((elco:fixnump (elco:fixnump #\A)) => "F~%")
   ((elco:fixnump (elco:char-fx #\r)) => "T~%")
   ((elco:fixnump (elco:fx-char 12)) => "F~%"))

(deftest ("fxzerop")
   ((elco:fxzerop 0) => "T~%")
   ((elco:fxzerop 1) => "F~%")
   ((elco:fxzerop -1) => "F~%")
   ((elco:fxzerop #xC0) => "F~%"))

(deftest ("nilp")
   ((elco:nilp ()) => "T~%")
   ((elco:nilp elco:F) => "F~%")
   ((elco:nilp elco:T) => "F~%")
   ((elco:nilp (elco:nilp ())) => "F~%")
   ((elco:nilp #\a) => "F~%")
   ((elco:nilp 0) => "F~%")
   ((elco:nilp -10) => "F~%")
   ((elco:nilp 10) => "F~%"))

(deftest ("boolp")
   ((elco:boolp elco:T) => "T~%")
   ((elco:boolp elco:F) => "T~%")
   ((elco:boolp 0) => "F~%")
   ((elco:boolp 1) => "F~%")
   ((elco:boolp -1) => "F~%")
   ((elco:boolp ()) => "F~%")
   ((elco:boolp #\a) => "F~%")
   ((elco:boolp (elco:boolp 0)) => "T~%")
   ((elco:boolp (elco:fixnump (elco:boolp 0))) => "T~%"))


(deftest ("charp")
   ((elco:charp #\a) => "T~%")
   ((elco:charp #\Z) => "T~%")
   ((elco:charp #\newline) => "T~%")
   ((elco:charp elco:T) => "F~%")
   ((elco:charp elco:F) => "F~%")
   ((elco:charp ()) => "F~%")
   ((elco:charp (elco:charp elco:T)) => "F~%")
   ((elco:charp 0) => "F~%")
   ((elco:charp 23870) => "F~%")
   ((elco:charp -23789) => "F~%"))

(deftest ("not")
  ((elco:not elco:T) => "F~%")
  ((elco:not elco:F) => "T~%")
  ((elco:not 15) => "F~%")
  ((elco:not ()) => "F~%")
  ((elco:not #\A) => "F~%")
  ((elco:not (elco:not elco:T)) => "T~%")
  ((elco:not (elco:not elco:F)) => "F~%")
  ((elco:not (elco:not 15)) => "T~%")
  ((elco:not (elco:fixnump 15)) => "F~%")
  ((elco:not (elco:fixnump elco:F)) => "T~%"))

(deftest ("fxlognot")
  ((elco:fxlognot 0) => "-1~%")
  ((elco:fxlognot -1) => "0~%")
  ((elco:fxlognot 1) => "-2~%")
  ((elco:fxlognot -2) => "1~%")
  ((elco:fxlognot 536870911) => "-536870912~%")
  ((elco:fxlognot -536870912) => "536870911~%")
  ((elco:fxlognot (elco:fxlognot 237463)) => "237463~%"))

;;; Step 4

(deftest ("if")
  ((if elco:T 12 13) => "12~%")
  ((if elco:F 12 13) => "13~%")
  ((if 0 12 13)  => "12~%")
  ((if () 43 ()) => "43~%")
  ((if elco:T (if 12 13 4) 17) => "13~%")
  ((if elco:F 12 (if elco:F 13 4)) => "4~%")
  ((if #\X (if 1 2 3) (if 4 5 6)) => "2~%")
  ((if (elco:not (elco:boolp elco:T)) 15 (elco:boolp elco:F)) => "T~%")
  ((if (if (elco:charp #\a) (elco:boolp #\b) (elco:fixnump #\c)) 119 -23) => "-23~%")
  ((if (if (if (elco:not 1) (elco:not 2) (elco:not 3)) 4 5) 6 7) => "6~%") 
  ((if (elco:not (if (if (elco:not 1) (elco:not 2) (elco:not 3)) 4 5)) 6 7) => "7~%") 
  ((elco:not (if (elco:not (if (if (elco:not 1) (elco:not 2) (elco:not 3)) 4 5)) 6 7)) => "F~%") 
  ((if (elco:charp 12) 13 14) => "14~%")
  ((if (elco:charp #\a) 13 14) => "13~%")
  ((elco:fx1+ (if (elco:fx1- 1) (elco:fx1- 13) 14)) => "13~%"))

;;; Step 5

(deftest ("fx+")
  ((elco:fx+ 1 2) => "3~%")
  ((elco:fx+ 1 -2) => "-1~%")
  ((elco:fx+ -1 2) => "1~%")
  ((elco:fx+ -1 -2) => "-3~%")
  ((elco:fx+ 536870911 -1) => "536870910~%")
  ((elco:fx+ 536870910 1) => "536870911~%")
  ((elco:fx+ -536870912 1) => "-536870911~%")
  ((elco:fx+ -536870911 -1) => "-536870912~%")
  ((elco:fx+ 536870911 -536870912) => "-1~%")
  ((elco:fx+ 1 (elco:fx+ 2 3)) => "6~%")
  ((elco:fx+ 1 (elco:fx+ 2 -3)) => "0~%")
  ((elco:fx+ 1 (elco:fx+ -2 3)) => "2~%")
  ((elco:fx+ 1 (elco:fx+ -2 -3)) => "-4~%")
  ((elco:fx+ -1 (elco:fx+ 2 3)) => "4~%")
  ((elco:fx+ -1 (elco:fx+ 2 -3)) => "-2~%")
  ((elco:fx+ -1 (elco:fx+ -2 3)) => "0~%")
  ((elco:fx+ -1 (elco:fx+ -2 -3)) => "-6~%")
  ((elco:fx+ (elco:fx+ 1 2) 3) => "6~%")
  ((elco:fx+ (elco:fx+ 1 2) -3) => "0~%")
  ((elco:fx+ (elco:fx+ 1 -2) 3) => "2~%")
  ((elco:fx+ (elco:fx+ 1 -2) -3) => "-4~%")
  ((elco:fx+ (elco:fx+ -1 2) 3) => "4~%")
  ((elco:fx+ (elco:fx+ -1 2) -3) => "-2~%")
  ((elco:fx+ (elco:fx+ -1 -2) 3) => "0~%")
  ((elco:fx+ (elco:fx+ -1 -2) -3) => "-6~%")
  ((elco:fx+ (elco:fx+ (elco:fx+ (elco:fx+ (elco:fx+ (elco:fx+ (elco:fx+ (elco:fx+ 1 2) 3) 4) 5) 6) 7) 8) 9) => "45~%")
  ((elco:fx+ 1 (elco:fx+ 2 (elco:fx+ 3 (elco:fx+ 4 (elco:fx+ 5 (elco:fx+ 6 (elco:fx+ 7 (elco:fx+ 8 9)))))))) => "45~%"))

(deftest ("fx-")
  ((elco:fx- 1 2) => "-1~%")
  ((elco:fx- 1 -2) => "3~%")
  ((elco:fx- -1 2) => "-3~%")
  ((elco:fx- -1 -2) => "1~%")
  ((elco:fx- 536870910 -1) => "536870911~%")
  ((elco:fx- 536870911 1) => "536870910~%")
  ((elco:fx- -536870911 1) => "-536870912~%")
  ((elco:fx- -536870912 -1) => "-536870911~%")
  ((elco:fx- 1 536870911) => "-536870910~%")
  ((elco:fx- -1 536870911) => "-536870912~%")
  ((elco:fx- 1 -536870910) => "536870911~%")
  ((elco:fx- -1 -536870912) => "536870911~%")
  ((elco:fx- 536870911 536870911) => "0~%")
  ;((elco:fx- 536870911 -536870912) => "-1~%")
  ((elco:fx- -536870911 -536870912) => "1~%")
  ((elco:fx- 1 (elco:fx- 2 3)) => "2~%")
  ((elco:fx- 1 (elco:fx- 2 -3)) => "-4~%")
  ((elco:fx- 1 (elco:fx- -2 3)) => "6~%")
  ((elco:fx- 1 (elco:fx- -2 -3)) => "0~%")
  ((elco:fx- -1 (elco:fx- 2 3)) => "0~%")
  ((elco:fx- -1 (elco:fx- 2 -3)) => "-6~%")
  ((elco:fx- -1 (elco:fx- -2 3)) => "4~%")
  ((elco:fx- -1 (elco:fx- -2 -3)) => "-2~%")
  ((elco:fx- 0 (elco:fx- -2 -3)) => "-1~%")
  ((elco:fx- (elco:fx- 1 2) 3) => "-4~%")
  ((elco:fx- (elco:fx- 1 2) -3) => "2~%")
  ((elco:fx- (elco:fx- 1 -2) 3) => "0~%")
  ((elco:fx- (elco:fx- 1 -2) -3) => "6~%")
  ((elco:fx- (elco:fx- -1 2) 3) => "-6~%")
  ((elco:fx- (elco:fx- -1 2) -3) => "0~%")
  ((elco:fx- (elco:fx- -1 -2) 3) => "-2~%")
  ((elco:fx- (elco:fx- -1 -2) -3) => "4~%")
  ((elco:fx- (elco:fx- (elco:fx- (elco:fx- (elco:fx- (elco:fx- (elco:fx- (elco:fx- 1 2) 3) 4) 5) 6) 7) 8) 9) => "-43~%")
  ((elco:fx- 1 (elco:fx- 2 (elco:fx- 3 (elco:fx- 4 (elco:fx- 5 (elco:fx- 6 (elco:fx- 7 (elco:fx- 8 9)))))))) => "5~%"))

(deftest ("fx*")
  ((elco:fx* 2 3) => "6~%")
  ((elco:fx* 2 -3) => "-6~%")
  ((elco:fx* -2 3) => "-6~%")
  ((elco:fx* -2 -3) => "6~%")
  ((elco:fx* 536870911 1) => "536870911~%")
  ((elco:fx* 536870911 -1) => "-536870911~%")
  ((elco:fx* -536870912 1) => "-536870912~%")
  ((elco:fx* -536870911 -1) => "536870911~%")
  ((elco:fx* 2 (elco:fx* 3 4)) => "24~%")
  ((elco:fx* (elco:fx* 2 3) 4) => "24~%")
  ((elco:fx* (elco:fx* (elco:fx* (elco:fx* (elco:fx* 2 3) 4) 5) 6) 7) => "5040~%")
  ((elco:fx* 2 (elco:fx* 3 (elco:fx* 4 (elco:fx* 5 (elco:fx* 6 7))))) => "5040~%"))

(deftest ("fxlogand and fxlogor")
  ((elco:fxlogor 3 16) => "19~%")
  ((elco:fxlogor 3 5)  => "7~%")
  ((elco:fxlogor 3 7)  => "7~%")
  ((elco:fxlognot (elco:fxlogor (elco:fxlognot 7) 1)) => "6~%")
  ((elco:fxlognot (elco:fxlogor 1 (elco:fxlognot 7))) => "6~%")
  ((elco:fxlogand 3 7) => "3~%")
  ((elco:fxlogand 3 5) => "1~%")
  ((elco:fxlogand 2346 (elco:fxlognot 2346)) => "0~%")
  ((elco:fxlogand (elco:fxlognot 2346) 2346) => "0~%")
  ((elco:fxlogand 2376 2376) => "2376~%"))

(deftest ("fx=")
  ((elco:fx= 12 13) => "F~%")
  ((elco:fx= 12 12) => "T~%")
  ((elco:fx= #xF00 #xE00) => "F~%")
  ((elco:fx= 16 (elco:fx+ 13 3)) => "T~%")
  ((elco:fx= 16 (elco:fx+ 13 13)) => "F~%")
  ((elco:fx= (elco:fx+ 13 3) 16) => "T~%")
  ((elco:fx= (elco:fx+ 13 13) 16) => "F~%"))

(deftest ("fx<")
  ((elco:fx< 12 13) => "T~%")
  ((elco:fx< 12 12) => "F~%")
  ((elco:fx< 13 12) => "F~%")
  ((elco:fx< #xE01 #xF00) => "T~%")
  ((elco:fx< 16 (elco:fx+ 13 1)) => "F~%")
  ((elco:fx< 16 (elco:fx+ 13 3)) => "F~%")
  ((elco:fx< 16 (elco:fx+ 13 13)) => "T~%")
  ((elco:fx< (elco:fx+ 13 1) 16) => "T~%")
  ((elco:fx< (elco:fx+ 13 3) 16) => "F~%")
  ((elco:fx< (elco:fx+ 13 13) 16) => "F~%"))

(deftest ("fx<=")
  ((elco:fx<= 12 13) => "T~%")
  ((elco:fx<= 12 12) => "T~%")
  ((elco:fx<= 13 12) => "F~%")
  ((elco:fx<= #xE01 #xF00) = "T~%")
  ((elco:fx<= 16 (elco:fx+ 13 1)) => "F~%")
  ((elco:fx<= 16 (elco:fx+ 13 3)) => "T~%")
  ((elco:fx<= 16 (elco:fx+ 13 13)) => "T~%")
  ((elco:fx<= (elco:fx+ 13 1) 16) => "T~%")
  ((elco:fx<= (elco:fx+ 13 3) 16) => "T~%")
  ((elco:fx<= (elco:fx+ 13 13) 16) => "F~%"))

(deftest ("fx>")
  ((elco:fx> 12 13) => "F~%")
  ((elco:fx> 12 12) => "F~%")
  ((elco:fx> 13 12) => "T~%")
  ((elco:fx> #xF00 #xE01) => "T~%")
  ((elco:fx> 16 (elco:fx+ 13 1)) => "T~%")
  ((elco:fx> 16 (elco:fx+ 13 3)) => "F~%")
  ((elco:fx> 16 (elco:fx+ 13 13)) => "F~%")
  ((elco:fx> (elco:fx+ 13 1) 16) => "F~%")
  ((elco:fx> (elco:fx+ 13 3) 16) => "F~%")
  ((elco:fx> (elco:fx+ 13 13) 16) => "T~%"))

(deftest ("fx>=")
  ((elco:fx>= 12 13) => "F~%")
  ((elco:fx>= 12 12) => "T~%")
  ((elco:fx>= 13 12) => "T~%")
  ((elco:fx>= #xF00 #xE01) => "T~%")
  ((elco:fx>= 16 (elco:fx+ 13 1)) => "T~%")
  ((elco:fx>= 16 (elco:fx+ 13 3)) => "T~%")
  ((elco:fx>= 16 (elco:fx+ 13 13)) => "F~%")
  ((elco:fx>= (elco:fx+ 13 1) 16) => "F~%")
  ((elco:fx>= (elco:fx+ 13 3) 16) => "T~%")
  ((elco:fx>= (elco:fx+ 13 13) 16) => "T~%"))

(deftest ("if and binary")
  ((elco:if (elco:fx= 12 13) 12 13) => "13~%")
  ((elco:if (elco:fx= 12 12) 13 14) => "13~%")
  ((elco:if (elco:fx< 12 13) 12 13) => "12~%")
  ((elco:if (elco:fx< 12 12) 13 14) => "14~%")
  ((elco:if (elco:fx< 13 12) 13 14) => "14~%")
  ((elco:if (elco:fx<= 12 13) 12 13) => "12~%")
  ((elco:if (elco:fx<= 12 12) 12 13) => "12~%")
  ((elco:if (elco:fx<= 13 12) 13 14) => "14~%")
  ((elco:if (elco:fx> 12 13) 12 13) => "13~%")
  ((elco:if (elco:fx> 12 12) 12 13) => "13~%")
  ((elco:if (elco:fx> 13 12) 13 14) => "13~%")
  ((elco:if (elco:fx>= 12 13) 12 13) => "13~%")
  ((elco:if (elco:fx>= 12 12) 12 13) => "12~%")
  ((elco:if (elco:fx>= 13 12) 13 14) => "13~%"))

(deftest ("binary primitives")
  ((elco:fxlognot -7) => "6~%")
  ((elco:fxlognot (elco:fxlogor (elco:fxlognot 7) 1)) => "6~%")
  ((elco:fxlognot (elco:fxlogor (elco:fxlognot 7) (elco:fxlognot 2))) => "2~%")
  ((elco:fxlogand (elco:fxlognot (elco:fxlognot 12)) (elco:fxlognot (elco:fxlognot 12))) => "12~%")
  ((elco:fx+ (elco:fx+ 1 2) (elco:fx+ 3 4)) => "10~%")
  ((elco:fx+ (elco:fx+ 1 2) (elco:fx+ 3 -4)) => "2~%")
  ((elco:fx+ (elco:fx+ 1 2) (elco:fx+ -3 4)) => "4~%")
  ((elco:fx+ (elco:fx+ 1 2) (elco:fx+ -3 -4)) => "-4~%")
  ((elco:fx+ (elco:fx+ 1 -2) (elco:fx+ 3 4)) => "6~%")
  ((elco:fx+ (elco:fx+ 1 -2) (elco:fx+ 3 -4)) => "-2~%")
  ((elco:fx+ (elco:fx+ 1 -2) (elco:fx+ -3 4)) => "0~%")
  ((elco:fx+ (elco:fx+ 1 -2) (elco:fx+ -3 -4)) => "-8~%")
  ((elco:fx+ (elco:fx+ -1 2) (elco:fx+ 3 4)) => "8~%")
  ((elco:fx+ (elco:fx+ -1 2) (elco:fx+ 3 -4)) => "0~%")
  ((elco:fx+ (elco:fx+ -1 2) (elco:fx+ -3 4)) => "2~%")
  ((elco:fx+ (elco:fx+ -1 2) (elco:fx+ -3 -4)) => "-6~%")
  ((elco:fx+ (elco:fx+ -1 -2) (elco:fx+ 3 4)) => "4~%")
  ((elco:fx+ (elco:fx+ -1 -2) (elco:fx+ 3 -4)) => "-4~%")
  ((elco:fx+ (elco:fx+ -1 -2) (elco:fx+ -3 4)) => "-2~%")
  ((elco:fx+ (elco:fx+ -1 -2) (elco:fx+ -3 -4)) => "-10~%")
  ((elco:fx+ (elco:fx+ (elco:fx+ (elco:fx+ (elco:fx+ (elco:fx+ (elco:fx+ (elco:fx+ 1 2) 3) 4) 5) 6) 7) 8) 9) => "45~%")
  ((elco:fx+ 1 (elco:fx+ 2 (elco:fx+ 3 (elco:fx+ 4 (elco:fx+ 5 (elco:fx+ 6 (elco:fx+ 7 (elco:fx+ 8 9)))))))) => "45~%")
  ((elco:fx+ (elco:fx+ (elco:fx+ (elco:fx+ 1 2) (elco:fx+ 3 4)) (elco:fx+ (elco:fx+ 5 6) (elco:fx+ 7 8)))
        (elco:fx+ (elco:fx+ (elco:fx+ 9 10) (elco:fx+ 11 12)) (elco:fx+ (elco:fx+ 13 14) (elco:fx+ 15 16)))) 
   => "136~%")
  ((elco:fx- (elco:fx- 1 2) (elco:fx- 3 4)) => "0~%")
  ((elco:fx- (elco:fx- 1 2) (elco:fx- 3 -4)) => "-8~%")
  ((elco:fx- (elco:fx- 1 2) (elco:fx- -3 4)) => "6~%")
  ((elco:fx- (elco:fx- 1 2) (elco:fx- -3 -4)) => "-2~%")
  ((elco:fx- (elco:fx- 1 -2) (elco:fx- 3 4)) => "4~%")
  ((elco:fx- (elco:fx- 1 -2) (elco:fx- 3 -4)) => "-4~%")
  ((elco:fx- (elco:fx- 1 -2) (elco:fx- -3 4)) => "10~%")
  ((elco:fx- (elco:fx- 1 -2) (elco:fx- -3 -4)) => "2~%")
  ((elco:fx- (elco:fx- -1 2) (elco:fx- 3 4)) => "-2~%")
  ((elco:fx- (elco:fx- -1 2) (elco:fx- 3 -4)) => "-10~%")
  ((elco:fx- (elco:fx- -1 2) (elco:fx- -3 4)) => "4~%")
  ((elco:fx- (elco:fx- -1 2) (elco:fx- -3 -4)) => "-4~%")
  ((elco:fx- (elco:fx- -1 -2) (elco:fx- 3 4)) => "2~%")
  ((elco:fx- (elco:fx- -1 -2) (elco:fx- 3 -4)) => "-6~%")
  ((elco:fx- (elco:fx- -1 -2) (elco:fx- -3 4)) => "8~%")
  ((elco:fx- (elco:fx- -1 -2) (elco:fx- -3 -4)) => "0~%")
  ((elco:fx- (elco:fx- (elco:fx- (elco:fx- (elco:fx- (elco:fx- (elco:fx- (elco:fx- 1 2) 3) 4) 5) 6) 7) 8) 9) => "-43~%")
  ((elco:fx- 1 (elco:fx- 2 (elco:fx- 3 (elco:fx- 4 (elco:fx- 5 (elco:fx- 6 (elco:fx- 7 (elco:fx- 8 9)))))))) => "5~%")
  ((elco:fx- (elco:fx- (elco:fx- (elco:fx- 1 2) (elco:fx- 3 4)) (elco:fx- (elco:fx- 5 6) (elco:fx- 7 8)))
        (elco:fx- (elco:fx- (elco:fx- 9 10) (elco:fx- 11 12)) (elco:fx- (elco:fx- 13 14) (elco:fx- 15 16)))) 
   => "0~%")
  ((elco:fx* (elco:fx* (elco:fx* (elco:fx* 2 3) (elco:fx* 4 5)) (elco:fx* (elco:fx* 6 7) (elco:fx* 8 9)))
        (elco:fx* (elco:fx* (elco:fx* 2 3) (elco:fx* 2 3)) (elco:fx* (elco:fx* 2 3) (elco:fx* 2 3)))) 
   => "470292480~%")
  ((elco:fxlognot (elco:fxlogor (elco:fxlognot 7) 1)) => "6~%")
  ((elco:fxlognot (elco:fxlogor (elco:fxlognot 7) (elco:fxlognot 2))) => "2~%")
  ((elco:fxlogand (elco:fxlognot (elco:fxlognot 12)) (elco:fxlognot (elco:fxlognot 12))) => "12~%")
  ((elco:fx= (elco:fx+ 13 3) (elco:fx+ 10 6)) => "T~%")
  ((elco:fx= (elco:fx+ 13 0) (elco:fx+ 10 6)) => "F~%")
  ((elco:fx= (elco:fx+ 12 1) (elco:fx+ -12 -1)) => "F~%")
  ((elco:fx< (elco:fx+ 10 6) (elco:fx+ 13 1)) => "F~%")
  ((elco:fx< (elco:fx+ 10 6) (elco:fx+ 13 3)) => "F~%")
  ((elco:fx< (elco:fx+ 10 6) (elco:fx+ 13 31)) => "T~%")
  ((elco:fx< (elco:fx+ 12 1) (elco:fx+ -12 -1)) => "F~%")
  ((elco:fx< (elco:fx+ -12 -1) (elco:fx+ 12 1)) => "T~%")
  ((elco:fx<= (elco:fx+ 10 6) (elco:fx+ 13 1)) => "F~%")
  ((elco:fx<= (elco:fx+ 10 6) (elco:fx+ 13 3)) => "T~%")
  ((elco:fx<= (elco:fx+ 10 6) (elco:fx+ 13 31)) => "T~%")
  ((elco:fx<= (elco:fx+ 12 1) (elco:fx+ -12 -1)) => "F~%")
  ((elco:fx<= (elco:fx+ -12 -1) (elco:fx+ 12 1)) => "T~%")
  ((elco:fx> (elco:fx+ 10 6) (elco:fx+ 13 1)) => "T~%")
  ((elco:fx> (elco:fx+ 10 6) (elco:fx+ 13 3)) => "F~%")
  ((elco:fx> (elco:fx+ 10 6) (elco:fx+ 13 31)) => "F~%")
  ((elco:fx> (elco:fx+ 12 1) (elco:fx+ -12 -1)) => "T~%")
  ((elco:fx> (elco:fx+ -12 -1) (elco:fx+ 12 1)) => "F~%")
  ((elco:fx>= (elco:fx+ 10 6) (elco:fx+ 13 1)) => "T~%")
  ((elco:fx>= (elco:fx+ 10 6) (elco:fx+ 13 3)) => "T~%")
  ((elco:fx>= (elco:fx+ 10 6) (elco:fx+ 13 31)) => "F~%")
  ((elco:fx>= (elco:fx+ 12 1) (elco:fx+ -12 -1)) => "T~%")
  ((elco:fx>= (elco:fx+ -12 -1) (elco:fx+ 12 1)) => "F~%"))

;;; Step 6
(deftest ("let")
  ((elco:let ((x 5)) x) => "5~%")
  ((elco:let ((x (elco:fx+ 1 2))) x) => "3~%")
  ((elco:let ((x (elco:fx+ 1 2))) 
     (elco:let ((y (elco:fx+ 3 4)))
       (elco:fx+ x y))) 
   => "10~%")
  ((elco:let ((x (elco:fx+ 1 2))) 
     (elco:let ((y (elco:fx+ 3 4)))
       (elco:fx- y x)))
   => "4~%")
  ((elco:let ((x (elco:fx+ 1 2))
         (y (elco:fx+ 3 4)))
     (elco:fx- y x))
   => "4~%")
  ((elco:let ((x (elco:let ((y (elco:fx+ 1 2))) (elco:fx* y y))))
     (elco:fx+ x x))
   => "18~%")
  ((elco:let ((x (elco:fx+ 1 2)))
     (elco:let ((x (elco:fx+ 3 4)))
       x)) 
   => "7~%")
  ((elco:let ((x (elco:fx+ 1 2)))
     (elco:let ((x (elco:fx+ x 4)))
       x)) 
   => "7~%")
  ((elco:let ((l (elco:let ((l (elco:let ((l (elco:let ((l (elco:fx+ 1 2))) l))) l))) l))) l)
   => "3~%")
  ((elco:let ((x 12))
     (elco:let ((x (elco:fx+ x x)))
       (elco:let ((x (elco:fx+ x x)))
         (elco:let ((x (elco:fx+ x x)))
           (elco:fx+ x x)))))
   => "192~%"))

;;; Step 6 opt
(deftest ("let*")
  ((elco:let* ((x 5)) x) => "5~%")
  ((elco:let* ((x (elco:fx+ 1 2))) x) => "3~%")
  ((elco:let* ((x (elco:fx+ 1 2)) 
               (y (elco:fx+ x 4)))
     (elco:fx+ x y)) 
   => "10~%")
  ((elco:let* ((x (elco:fx+ 1 2))
              (y (elco:fx+ x 4)))
     (elco:fx- y x))
   => "4~%")
  ((elco:let* ((x 12)
              (x (elco:fx+ x x))
              (x (elco:fx+ x x))
              (x (elco:fx+ x x)))
     (elco:fx+ x x))
   => "192~%"))

;;; Step 7

(deftest ("procedures")
  ((elco:letrec () 12) => "12~%")
  ((elco:letrec () (let ((x 5)) (elco:fx+ x x))) => "10~%")
  ((elco:letrec ((l (elco:lambda () 5))) 7) => "7~%")
  ((elco:letrec ((l (elco:lambda () 5))) (let ((x 12)) x)) => "12~%")
  ((elco:letrec ((l (elco:lambda () 5))) (l)) => "5~%")
  ((elco:letrec ((l (elco:lambda () 5))) (let ((x (l))) x)) => "5~%")
  ((elco:letrec ((l (elco:lambda () 5))) (elco:fx+ (l) 6)) => "11~%")
  ((elco:letrec ((l (elco:lambda () 5))) (elco:fx- 20 (l))) => "15~%")
  ((elco:letrec ((l (elco:lambda () 5))) (elco:fx+ (l) (l))) => "10~%")
  ((elco:letrec ((l (elco:lambda () (elco:fx+ 5 7)))
            (g (elco:lambda () 13))) 
    (elco:fx+ (l) (g))) => "25~%")
  ((elco:letrec ((l (elco:lambda (x) (elco:fx+ x 12)))) (l 13)) => "25~%")
  ((elco:letrec ((l (elco:lambda (x) (elco:fx+ x 12)))) (l (l 10))) => "34~%")
  ((elco:letrec ((l (elco:lambda (x) (elco:fx+ x 12)))) (l (l (l 0)))) => "36~%")
  ((elco:letrec ((l (elco:lambda (x y) (elco:fx+ x y))) 
            (g (elco:lambda (x) (elco:fx+ x 12))))
    (l 16 (l (g 0) (elco:fx+ 1 (g 0))))) => "41~%")
  ((elco:letrec ((l (elco:lambda (x) (g x x)))
            (g (elco:lambda (x y) (elco:fx+ x y))))
     (l 12)) => "24~%")
  ((elco:letrec ((l (elco:lambda (x) 
                 (elco:if (elco:fxzerop x)
                     1
                     (elco:fx* x (l (elco:fx1- x)))))))
      (l 5)) => "120~%")
  ((elco:letrec ((e (elco:lambda (x) (elco:if (elco:fxzerop x) elco:T (o (elco:fx1- x)))))
            (o (elco:lambda (x) (elco:if (elco:fxzerop x) elco:F (e (elco:fx1- x))))))
     (e 25)) => "F~%"))

(deftest ("deeply nested procedures (notail safe)")
  ((elco:letrec ((sum (elco:lambda (n ac)
                   (if (elco:fxzerop n)
                        ac
                        (app sum (elco:fx1- n) (elco:fx+ n ac))))))
    (app sum 1000 0)) => "500500~%")
  ((elco:letrec ((e (elco:lambda (x) (if (elco:fxzerop x) elco:T (app o (elco:fx1- x)))))
            (o (elco:lambda (x) (if (elco:fxzerop x) elco:F (app e (elco:fx1- x))))))
     (app e 5000)) => "T~%"))

(deftest ("deeply nested procedures (notail unsafe)")
  ((elco:letrec ((sum (elco:lambda (n ac)
                   (if (elco:fxzerop n)
                        ac
                        (app sum (elco:fx1- n) (elco:fx+ n ac))))))
    (app sum 10000 0)) => "50005000~%")
  ((elco:letrec ((e (elco:lambda (x) (if (elco:fxzerop x) elco:T (app o (elco:fx1- x)))))
            (o (elco:lambda (x) (if (elco:fxzerop x) elco:F (app e (elco:fx1- x))))))
     (app e 5000000)) => "T~%"))