(set *all-tests* '())

(def esc (str)
  (subst "\\\\" "\\" 
         (subst "\\n" "\n" 
                (subst "\\\"" "\"" 
                       (coerce str 'string)))))

(def run-test (input output)
  (let elco-output (execute-program input)
       (if (no (is elco-output output))
           (do 
             (prf "FAILED, expected output was ~s but got ~s\n" output elco-output)
             nil)
           t)))

(def run-tests ()
  (let f nil
    (= f (fn (i ls)
           (if (no ls)
               (do
                 (prf "Passed all ~s tests!!!\n" i)
                 t)
               (with (x (car ls)
                        ls (cdr ls))
                 (with (test-name (car x)
                                  tests (cdr x))
                   (prf "Performing ~a tests...\n" test-name)
                   (let g nil
                     (= g (fn (i tests)
                            (if (no tests) (f i ls)
                                (do 
                                  (pr "test with in: " (esc:car:car tests) " out: " (esc:car:cdr:car tests) " ... ")
                                  (if (run-test (car:car tests) (car:cdr:car tests))
                                      (do
                                        (prn "PASSED")
                                        (g (+ 1 i) (cdr tests))))))))
                     (g i tests)))))))
    (f 0 (rev *all-tests*))))

(mac deftest ((test-id) . body)
  `(= *all-tests* (cons 
                    (list 
                      ,test-id 
                      ,@(map (fn (x) `(quote (,(car x) 
                                              ,(car:cddr x)))) 
                              body)) 
                    *all-tests*)))

;;; Step 1

(deftest ("fixnum")
  (0  => "0\n")
  (1  => "1\n")
  (-1 => "-1\n")
  (10  => "10\n")
  (-10 => "-10\n")                   
  (2736 => "2736\n")             
  (-2736 => "-2736\n")
  (536870911 => "536870911\n")
  (-536870912 => "-536870912\n"))

;;; Step 2

(deftest ("immediate constants")
;  (F => "F\n")
  (t => "t\n")
  (nil => "nil\n")
  (#\Nul => "#\\nul\n")
;  (#\Soh => "#\\soh\n")
;  (#\Stx => "#\\stx\n")
;  (#\Etx => "#\\etx\n")
;  (#\Eot => "#\\eot\n")
;  (#\Enq => "#\\enq\n")
;  (#\Ack => "#\\ack\n")
;  (#\Bel => "#\\bel\n")
  (#\Backspace => "#\\bs\n")
  (#\tab => "#\\tab\n")
  (#\newline => "#\\newline\n")
;  (#\Vt => "#\\vt\n")
  (#\Page => "#\\ff\n")
  (#\Return => "#\\return\n")
;  (#\So => "#\\so\n")
;  (#\Si => "#\\si\n")
;  (#\Dle => "#\\dle\n")
;  (#\Dc1 => "#\\dc1\n")
;  (#\Dc2 => "#\\dc2\n")
;  (#\Dc3 => "#\\dc3\n")
;  (#\Dc4 => "#\\dc4\n")
;  (#\Nak => "#\\nak\n")
;  (#\Syn => "#\\syn\n")
;  (#\Etb => "#\\etb\n")
;  (#\Can => "#\\can\n")
;  (#\Em => "#\\em\n")
;  (#\Sub => "#\\sub\n")
;  (#\Esc => "#\\esc\n")
;  (#\Fs => "#\\fs\n")
;  (#\Gs => "#\\gs\n")
;  (#\Rs => "#\\rs\n")
;  (#\Us => "#\\us\n")
  (#\space => "#\\space\n")
  (#\! => "#\\!\n")
  (#\" => "#\\\"\n")
  (#\# => "#\\#\n")
  (#\$ => "#\\$\n")
  (#\% => "#\\%\n")
  (#\& => "#\\&\n")
  (#\' => "#\\'\n")
  (#\( => "#\\(\n")
  (#\) => "#\\)\n")
  (#\* => "#\\*\n")
  (#\+ => "#\\+\n")
  (#\, => "#\\,\n")
  (#\- => "#\\-\n")
  (#\. => "#\\.\n")
  (#\/ => "#\\/\n")
  (#\0 => "#\\0\n")
  (#\1 => "#\\1\n")
  (#\2 => "#\\2\n")
  (#\3 => "#\\3\n")
  (#\4 => "#\\4\n")
  (#\5 => "#\\5\n")
  (#\6 => "#\\6\n")
  (#\7 => "#\\7\n")
  (#\8 => "#\\8\n")
  (#\9 => "#\\9\n")
  (#\: => "#\\:\n")
  (#\; => "#\\;\n")
  (#\< => "#\\<\n")
  (#\= => "#\\=\n")
  (#\> => "#\\>\n")
  (#\? => "#\\?\n")
  (#\@ => "#\\@\n")
  (#\A => "#\\A\n")
  (#\B => "#\\B\n")
  (#\C => "#\\C\n")
  (#\D => "#\\D\n")
  (#\E => "#\\E\n")
  (#\F => "#\\F\n")
  (#\G => "#\\G\n")
  (#\H => "#\\H\n")
  (#\I => "#\\I\n")
  (#\J => "#\\J\n")
  (#\K => "#\\K\n")
  (#\L => "#\\L\n")
  (#\M => "#\\M\n")
  (#\N => "#\\N\n")
  (#\O => "#\\O\n")
  (#\P => "#\\P\n")
  (#\Q => "#\\Q\n")
  (#\R => "#\\R\n")
  (#\S => "#\\S\n")
  (#\T => "#\\T\n")
  (#\U => "#\\U\n")
  (#\V => "#\\V\n")
  (#\W => "#\\W\n")
  (#\X => "#\\X\n")
  (#\Y => "#\\Y\n")
  (#\Z => "#\\Z\n")
  (#\( => "#\\(\n")
  (#\\ => "#\\\\\n")
  (#\] => "#\\]\n")
  (#\^ => "#\\^\n")
  (#\_ => "#\\_\n")
  (#\` => "#\\`\n")
  (#\a => "#\\a\n")
  (#\b => "#\\b\n")
  (#\c => "#\\c\n")
  (#\d => "#\\d\n")
  (#\e => "#\\e\n")
  (#\f => "#\\f\n")
  (#\g => "#\\g\n")
  (#\h => "#\\h\n")
  (#\i => "#\\i\n")
  (#\j => "#\\j\n")
  (#\k => "#\\k\n")
  (#\l => "#\\l\n")
  (#\m => "#\\m\n")
  (#\n => "#\\n\n")
  (#\o => "#\\o\n")
  (#\p => "#\\p\n")
  (#\q => "#\\q\n")
  (#\r => "#\\r\n")
  (#\s => "#\\s\n")
  (#\t => "#\\t\n")
  (#\u => "#\\u\n")
  (#\v => "#\\v\n")
  (#\w => "#\\w\n")
  (#\x => "#\\x\n")
  (#\y => "#\\y\n")
  (#\z => "#\\z\n")
  (#\{ => "#\\{\n")
  (#\| => "#\\|\n")
  (#\} => "#\\}\n")
  (#\~ => "#\\~\n")
  (#\Rubout => "#\\del\n"))